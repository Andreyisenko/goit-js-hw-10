{"version":3,"file":"1-timer-WcmGwsC7.js","sources":["../../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inpT = document.querySelector('#datetime-picker');\nconst btN = document.querySelector('button[data-start]');\nconst spnDay = document.querySelector('span[data-days]');\nconst spnHours = document.querySelector('span[data-hours]');\nconst spnMinutes = document.querySelector('span[data-minutes]');\nconst spnSeconds = document.querySelector('span[data-seconds]');\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = pad(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n\nlet userSelectedDate;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < Date.now()) {\n      iziToast.show({\n        color: 'red',\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n    }\n  },\n};\nflatpickr(inpT, options);\n// btN.addEventListener('click', handleClick);\n\n// function handleClick(event) {\n  // console.log(spnDay.textContent);\n  // console.log(spnHours.textContent);\n  // console.log(spnMinutes.textContent);\n  // console.log(spnSeconds.textContent);\n// }\n// class Timer {\n//   constructor({ onTick }) {\n//     this.isActive = false;\n//     this.onTick = onTick;\n//     this.intervalId = null;\n//   }\n\n//    start() {\n//     if (this.isActive) {\n//       return;\n//     }\n\n//     const starTime = Date.now();\n//     this.isActive = true;\n//     this.intervalId = setInterval(() => {\n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - starTime;\n//       const time = convertMs(deltaTime);\n\n//       this.onTick(time);\n//     }, 1000);\n//   }\n\n//   stop() {\n//     clearInterval(this.intervalId)\n//     this.isActive = false;\n//   }\n\n//   pad(value){\n//     return String(value).padStart(2, \"0\")\n//   }\n// }\n// const timer = new Timer({\n//   onTick: updateClockFase,\n// });\n\n// btN.addEventListener('click', timer.start.bind(timer));\n\n// function updateClockFase({ days, hours, minutes, seconds }) {\n//   spnDay.textContent = `${days}`;\n//   spnHours.textContent = `${hours}`;\n//   spnMinutes.textContent = `${minutes}`;\n//   spnSeconds.textContent = `${seconds}`;\n// }\n// // updateClockFase()\n\n\n\n\n\n\nlet isActive = false;\nlet intervalId = null;\nbtN.addEventListener('click', start);\n\n\nfunction start() {\n    if (isActive) {\n      return;\n    }\n\n    const starTime = Date.now();\n    isActive = true;\n    intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - starTime;\n      const time = convertMs(deltaTime);\n\n      onTick(time);\n    }, 1000);\n  }\n\n  function pad(value) {\n    return String(value).padStart(2, \"0\")\n  }\n  function onTick({ days, hours, minutes, seconds }) {\n    spnDay.textContent = `${days}`;\n    spnHours.textContent = `${hours}`;\n    spnMinutes.textContent = `${minutes}`;\n    spnSeconds.textContent = `${seconds}`;\n  }\n  \n  function stop() {\n    clearInterval(intervalId)\n    isActive = false;\n  }"],"names":["inpT","btN","spnDay","spnHours","spnMinutes","spnSeconds","convertMs","ms","days","hours","pad","minutes","seconds","userSelectedDate","options","selectedDates","iziToast","flatpickr","isActive","start","starTime","deltaTime","time","onTick","value"],"mappings":"gDAMA,MAAMA,EAAO,SAAS,cAAc,kBAAkB,EAChDC,EAAM,SAAS,cAAc,oBAAoB,EACjDC,EAAS,SAAS,cAAc,iBAAiB,EACjDC,EAAW,SAAS,cAAc,kBAAkB,EACpDC,EAAa,SAAS,cAAc,oBAAoB,EACxDC,EAAa,SAAS,cAAc,oBAAoB,EAE9D,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQC,EAAI,KAAK,MAAOH,EAAK,MAAO,IAAI,CAAC,EAEzCI,EAAUD,EAAI,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,CAAC,EAEtDK,EAAUF,EAAI,KAAK,MAASH,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAEvE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAE,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIN,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAC/B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAE7B,IAAIO,EACJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BF,EAAmBE,EAAc,CAAC,EAC9BF,EAAmB,KAAK,OAC1BG,EAAS,KAAK,CACZ,MAAO,MACP,SAAU,WACV,QAAS,oCACjB,CAAO,CAEJ,CACH,EACAC,EAAUjB,EAAMc,CAAO,EA4DvB,IAAII,EAAW,GAEfjB,EAAI,iBAAiB,QAASkB,CAAK,EAGnC,SAASA,GAAQ,CACb,GAAID,EACF,OAGF,MAAME,EAAW,KAAK,MACtBF,EAAW,GACE,YAAY,IAAM,CAE7B,MAAMG,EADc,KAAK,MACOD,EAC1BE,EAAOhB,EAAUe,CAAS,EAEhCE,EAAOD,CAAI,CACZ,EAAE,GAAI,CACR,CAED,SAASZ,EAAIc,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACrC,CACD,SAASD,EAAO,CAAE,KAAAf,EAAM,MAAAC,EAAO,QAAAE,EAAS,QAAAC,CAAO,EAAI,CACjDV,EAAO,YAAc,GAAGM,CAAI,GAC5BL,EAAS,YAAc,GAAGM,CAAK,GAC/BL,EAAW,YAAc,GAAGO,CAAO,GACnCN,EAAW,YAAc,GAAGO,CAAO,EACvC"}